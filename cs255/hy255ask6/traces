   0x8048aac <readString>:      push   %ebp 
   0x8048aad <readString+1>:    mov    %esp,%ebp
   0x8048aaf <readString+3>:    sub    $0x38,%esp
   0x8048ab2 <readString+6>:    movl   $0x0,-0xc(%ebp) //i = 0;
   0x8048ab9 <readString+13>:   mov    0x80d4ba4,%eax //while starts
   0x8048abe <readString+18>:   sub    $0xc,%esp
   0x8048ac1 <readString+21>:   push   %eax
   0x8048ac2 <readString+22>:   call   0x8050880 <getc> //c = fgetc(stdin);
   0x8048ac7 <readString+27>:   add    $0x10,%esp
   0x8048aca <readString+30>:   mov    %eax,-0x10(%ebp)
   0x8048acd <readString+33>:   cmpl   $0xffffffff,-0x10(%ebp) //if c == EOF
   0x8048ad1 <readString+37>:   je     0x8048aeb <readString+63> //break;
   0x8048ad3 <readString+39>:   cmpl   $0xa,-0x10(%ebp) //if if c == '\n'
   0x8048ad7 <readString+43>:   je     0x8048aeb <readString+63> //break;
   0x8048ad9 <readString+45>:   mov    -0xc(%ebp),%eax
   0x8048adc <readString+48>:   lea    0x1(%eax),%edx
   0x8048adf <readString+51>:   mov    %edx,-0xc(%ebp)
   0x8048ae2 <readString+54>:   mov    -0x10(%ebp),%edx
   0x8048ae5 <readString+57>:   mov    %dl,-0x2e(%ebp,%eax,1)
   0x8048ae9 <readString+61>:   jmp    0x8048ab9 <readString+13> //jump back to while start
   0x8048aeb <readString+63>:   lea    -0x2e(%ebp),%edx
   0x8048aee <readString+66>:   mov    -0xc(%ebp),%eax
   0x8048af1 <readString+69>:   add    %edx,%eax 
   0x8048af3 <readString+71>:   movb   $0x0,(%eax) //buf[i] = 0;
   0x8048af6 <readString+74>:   movl   $0x0,-0xc(%ebp)//i = 0;
   0x8048afd <readString+81>:   jmp    0x8048b18 <readString+108> //jump to compare
   0x8048aff <readString+83>:   mov    -0xc(%ebp),%edx //for start
   0x8048b02 <readString+86>:   mov    0x8(%ebp),%eax
   0x8048b05 <readString+89>:   add    %eax,%edx
   0x8048b07 <readString+91>:   lea    -0x2e(%ebp),%ecx
   0x8048b0a <readString+94>:   mov    -0xc(%ebp),%eax
   0x8048b0d <readString+97>:   add    %ecx,%eax
   0x8048b0f <readString+99>:   movzbl (%eax),%eax
   0x8048b12 <readString+102>:  mov    %al,(%edx)
   0x8048b14 <readString+104>:  addl   $0x1,-0xc(%ebp)
   0x8048b18 <readString+108>:  cmpl   $0x1d,-0xc(%ebp) //i < BUFSIZE;
   0x8048b1c <readString+112>:  jle    0x8048aff <readString+83> //jump back to for start
   0x8048b1e <readString+114>:  nop
   0x8048b1f <readString+115>:  leave
   0x8048b20 <readString+116>:  ret
   0x8048b21 <main>:    lea    0x4(%esp),%ecx
   0x8048b25 <main+4>:  and    $0xfffffff0,%esp
   0x8048b28 <main+7>:  pushl  -0x4(%ecx)
   0x8048b2b <main+10>: push   %ebp
   0x8048b2c <main+11>: mov    %esp,%ebp
   0x8048b2e <main+13>: push   %ecx
   0x8048b2f <main+14>: sub    $0x4,%esp
   0x8048b32 <main+17>: mov    $0x80d6620,%eax
   0x8048b37 <main+22>: and    $0xfffff000,%eax
   0x8048b3c <main+27>: sub    $0x4,%esp
   0x8048b3f <main+30>: push   $0x7
   0x8048b41 <main+32>: push   $0x1
   0x8048b43 <main+34>: push   %eax
   0x8048b44 <main+35>: call   0x805e1b0 <mprotect> //mprotect call
   0x8048b49 <main+40>: add    $0x10,%esp
   0x8048b4c <main+43>: sub    $0xc,%esp
   0x8048b4f <main+46>: push   $0x80ab108
   0x8048b54 <main+51>: call   0x804f0a0 <puts>
   0x8048b59 <main+56>: add    $0x10,%esp
   0x8048b5c <main+59>: sub    $0xc,%esp
   0x8048b5f <main+62>: push   $0x80d6620
   0x8048b64 <main+67>: call   0x8048aac <readString> //readString(Name);
   0x8048b69 <main+72>: add    $0x10,%esp
   0x8048b6c <main+75>: sub    $0x8,%esp
   0x8048b6f <main+78>: push   $0x80ab11b
   0x8048b74 <main+83>: push   $0x80d6620
   0x8048b79 <main+88>: call   0x805afc0 <strcmp> //strcmp
   0x8048b7e <main+93>: add    $0x10,%esp
   0x8048b81 <main+96>: test   %eax,%eax
   0x8048b83 <main+98>: jne    0x8048b8c <main+107>
   0x8048b85 <main+100>:        movb   $0x36,0x80d4748 //grade = '6';
   0x8048b8c <main+107>:        sub    $0x8,%esp
   0x8048b8f <main+110>:        push   $0x80d6620
   0x8048b94 <main+115>:        push   $0x80ab129
   0x8048b99 <main+120>:        call   0x804eb20 <printf> //printfs
   0x8048b9e <main+125>:        add    $0x10,%esp
   0x8048ba1 <main+128>:        movzbl 0x80d4748,%eax
   0x8048ba8 <main+135>:        movsbl %al,%eax
   0x8048bab <main+138>:        sub    $0x8,%esp


0x80d4748 <grade> "3"
51 '3'

Stack frame of readString:

esp:    char c
------------------------
esp-4:	int i = 0
------------------------
esp-8:	char buf[30]
------------------------
esp-12:	char *s
------------------------
esp-16:	ret
------------------------
	
